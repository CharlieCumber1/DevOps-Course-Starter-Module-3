import os
from todo_app import app
from todo_app.data.mongodb import MongoDB
from threading import Thread
import pytest
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from dotenv import load_dotenv, find_dotenv
from flask_login import login_user
from todo_app.user import User

def stub_get_user(*args, **kwargs):
    return User("test-user")

def stub_user_is_writer(*args, **kwargs):
    return True

@pytest.fixture(scope='module')
def test_app():
    # Create the new board & update the board id environment variable
    file_path = find_dotenv('.env')
    load_dotenv(file_path, override=True)
    os.environ['LOGIN_DISABLED'] = "TRUE"
    os.environ['MONGODB_DATABASE_NAME'] = 'e2e-test-database'
    database = MongoDB()
    database.delete_current_database()

    # construct the new application
    application = app.create_app()
    
    # start the app in its own thread.
    thread = Thread(target=lambda: application.run(use_reloader=False))
    thread.daemon = True
    thread.start()
    yield app

    # Tear Down
    thread.join(1)
    database.delete_current_database()


@pytest.fixture(scope="module")
def driver():
    opts = webdriver.ChromeOptions()
    opts.add_argument('--headless')
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    with webdriver.Chrome('./chromedriver', options=opts) as driver:
        yield driver


def test_page_loads(monkeypatch, driver, test_app):
    monkeypatch.setattr('flask_login.utils._get_user', stub_get_user)

    driver.get('http://localhost:5000/')
    assert driver.title == 'To-Do App'


def test_task_journey(monkeypatch, driver, test_app):
    monkeypatch.setattr('flask_login.utils._get_user', stub_get_user)
    monkeypatch.setattr('todo_app.user.User.is_writer', stub_user_is_writer)

    driver.get('http://localhost:5000/')
    task_name_input = driver.find_element_by_id('name-input')
    submit_button = driver.find_element_by_id('add-new-task-button')

    task_title = 'This is a test item generated by selenium driver'
    task_name_input.send_keys(task_title)
    submit_button.click()

    assert check_task_exists_with_status(driver, task_title, 'To do')
    assert not check_task_exists_with_status(driver, task_title, 'Doing')
    assert not check_task_exists_with_status(driver, task_title, 'Done')
    
    start_task_button = get_button_with_text_for_task(driver, task_title, 'Start')
    start_task_button.click()
    assert not check_task_exists_with_status(driver, task_title, 'To do')
    assert check_task_exists_with_status(driver, task_title, 'Doing')
    assert not check_task_exists_with_status(driver, task_title, 'Done')

    complete_task_button = get_button_with_text_for_task(driver, task_title, 'Complete')
    complete_task_button.click()
    assert not check_task_exists_with_status(driver, task_title, 'To do')
    assert not check_task_exists_with_status(driver, task_title, 'Doing')
    assert check_task_exists_with_status(driver, task_title, 'Done')

    delete_task_button = get_button_with_text_for_task(driver, task_title, 'Delete')
    delete_task_button.click()
    assert not check_task_exists_with_status(driver, task_title, 'To do')
    assert not check_task_exists_with_status(driver, task_title, 'Doing')
    assert not check_task_exists_with_status(driver, task_title, 'Done')


def get_button_with_text_for_task(driver, task_title, button_text):
    button = driver.find_element_by_xpath(f'//li[div/h5[text()="{task_title}"]]/a[text()="{button_text}"]')
    return button


def check_task_exists_with_status(driver, task_title, status):
    try:
        driver.find_element_by_xpath(f'//div[h2[text()="{status}"]]//h5[text()="{task_title}"]').is_displayed()
    except NoSuchElementException:
        return False
    return True
